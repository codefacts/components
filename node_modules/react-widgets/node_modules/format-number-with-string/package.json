{
  "name": "format-number-with-string",
  "version": "0.0.1",
  "description": "Format a number based on a format string '-£#,##0.##0'",
  "main": "index.js",
  "scripts": {
    "test": "node test"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/DeeLindesay/format-number-with-string.git"
  },
  "keywords": [
    "number",
    "format",
    "format-string"
  ],
  "author": {
    "name": "DeeLindesay"
  },
  "license": "MIT",
  "dependencies": {
    "deconstruct-number-format": "~0.0.1",
    "format-number": "^2.0.0"
  },
  "devDependencies": {
    "testit": "~1.2.0"
  },
  "readme": "# format-number-with-string\r\nExpects a valid number in 'computer' format and a format string (eg '-£#,###,##0.000 /m', '(## years)') which is used to format the number.\r\n\r\nBasically a wrapper that uses deconstruct-format-string to deconstruct the format and then passes the results to format-number to do the formatting\r\n\r\n## The number\r\nCan be a number or a string of a number\r\n\r\n## Format String Can Include:\r\n- negative signs before or after prefix text or before or after suffix text\r\n- brackets as negative signs before/after prefix/suffix\r\n- prefix and suffix texts\r\n- `.` or `,` as decimal point\r\n- space or `.` or `,` as thousand separators\r\n- space or `.` or `,` as thousanths separators\r\n- `#`, `9` or `0` as number place holders\r\nIf the format string is undefined or an empty string then defaults are used (see format-number)\r\n\r\n## Use\r\n\r\n```\r\nvar format = require('format-number-with-string');\r\nvar overrideOptions = {noUnits: true, noSeparator: true};\r\n\r\nvar output1 = format(3345.23, '-£#,###,###.00');\r\nvar output2 = format(3345.23, '-£#,###,###.00', overrideOptions);\r\n\r\n```\r\n## Format Notes and Examples\r\n\r\n### Padding\r\nA `0` will pad to that position\r\n- `92332.42,'## ##0.##0 ##'`  returns '92 332.420'\r\n- `'.42','## ##0.##0 ##'`  returns '0.420'\r\n- `33, '00000'` returns '00033' \r\n\r\n### Rounding\r\nA `0` or `9` in the last decimal space will cause rounding to that number of places\r\n- `'92332.42467','## ##0.##0'`  returns '92 332.425'\r\n\r\n### Negatives\r\nWARNING - omitting a negative from the format string will return the absolute value\r\n- `'-332.42','(###.###)'`  returns '(332.42)'\r\n- `'-332.42','- ###.###'`  returns '- 332.42'\r\n- `'-332.42','###.###-'`  returns '332.42-'\r\n- `'-332.42','###.###'`  returns '332.42'\r\n\r\n### Decimal points/thousands separators in the format string:\r\nIf a format ends in a . or , then this will be taken as the decimal character UNLESS the same character is used elsewhere so:\r\n- `'923324234','#,###.'`  returns '923,324,234'\r\n- `'923324234','#.###,'`  returns '923.324.234'\r\n\r\nIf a format only has one of ',' or '.' and the character only appears once it is taken as the decimal point\r\n- `'2332.42','#,###'`  returns '2332,42'\r\n- `'2332.42','#.###'`  returns '2332.42'\r\n\r\nIf the character appears twice in the format string it is a separator\r\n- `'923324234','#,###,###'`  returns '923,324,234'\r\n\r\nWhen in doubt '.' in the format string is the decimal point, so \r\n- `'234.45645','#.###,#'` returns '234.456,45'\r\nTo create a similar structure with decimalChar as ',', just add a '.' at start or end or extend expression eg\r\n- `.#.###,#`\r\n- `#.###,#.`\r\n- `#.###.###,#`\r\n\r\n### Units/Prefix Text\r\nUnits can be before or after negative symbols.\r\nPrefix text cannot contain number placeholder characters\r\n`'-233278', '($# ###.### # per year)'` returns '($233 278 per year)'\r\n`'-233278', '$# ##0.00# #- per year'` returns '$233 278- per year';\r\n`'-456.23', '-$# ##0.00# # per year'` returns '-$456.23 per year';\r\n\r\n## Override Options\r\n\r\nAs used in format-number\r\n- `noUnits` boolean: if true will override and leave out prefix and suffix; default= false\r\n- `noSeparator` - boolean: if true will override both integer and decimals separator and leave them out\r\n\r\n\r\n## Does not work for:\r\n- structured reference numbers, eg 9999-9999\r\n- ignores and removes leading and trailing spaces (but retains those between pre/post fix and negative symbols etc)",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/DeeLindesay/format-number-with-string/issues"
  },
  "_id": "format-number-with-string@0.0.1",
  "_from": "format-number-with-string@0.0.1"
}
